/**
 * @desc    This module provides test cases based on Charging TPs
 * @see     Electronic fee collection (EFC) — Evaluation of equipment for conformity to CEN ISO/TS 17575-2 — Part 1: Test suite structure and test purpose
 * @remark  See clause 5.3.2 for TC namimg conventions
 * @version $id$
 */
module Communication_TCs {
    
    // LibEfc_common
    import from Common_TypesAndValues all;
    import from Common_Pixits all;
    
    // Communication ATS
    import from Communication_TypesAndValues all;
    import from Communication_Interfaces all;
    import from Common_Functions {
        group DUT_Actions
    };
    import from Communication_Functions all;
    import from Communication_Templates all;
    import from Communication_Pixits all;
    import from Communication_PICS {
        modulepar
            PIC_ERNoError_on_successful,
            PIC_ERNotSet_returned_on_failure,
            PIC_ERNoError_on_successfully_deleted,
            PIC_FALSE_if_not_available,
            PIC_TRUE_if_stack_available,
            PIC_ERNoError_on_successfully_dropped,
            PIC_API_supports_InstanceStateChange_Event,
            PIC_API_supports_ADUSendOK_Event,
            PIC_API_supports_ADUSent_Event,
            PIC_API_supports_UnformattedADUReceived_Event,
            PIC_API_supports_ADUReceived_Event
    };

    /**
     * @desc    It ontains the Test Purposes (TP) for the conformity evaluation of Front End Communications API to [TS 17575-2
     */
    group Front_End_Communications_API {

        /**
         * @desc    These Test Purposes apply to:
         * - Iso17575-3Adu as claimed in [TS 17575-3] clause B.5.4.1/1,
         * - AttributeList as claimed in [TS 17575-3] clause B.5.4.1/3, 
         * - EFC Attributes as claimed in [TS 17575-3] clause B.5.4.3/1-9
         * @remark 56 TCs
         */
        group Instance_Handling {
            /**
             * @desc    These Test Purposes apply to  instance handling as claimed in [TS 17575-2] clause B.2 with respect to following PICS proforma entries:
             * - API supports InitialiseInstance;
             * - API supports SetParameter;
             * - API supports GetParameter;
             * - API supports DeleteParameter;
             * - API supports DropInstance;
             * - API supports StackAvail
             * Test subgroup objective:
             * - to test DUT behaviour with respect to instance initialization including multiple instance handling in parallel;
             * - to test DUT behaviour with respect to parameter setting and updating;
             * - to test DUT behaviour with respect to parameter getting;
             * - to test DUT behaviour with respect to parameter deleting;
             * - to test DUT behaviour with respect to availability of communications stack;
             * - to test DUT behaviour with respect to dropping the session with following severities:
             *      - SENormal;
             *      - SEUrgent;
             *      - SEUnconditional.
             * @remark  27 TCs
             */
            group Valid_Behaviour {

                /**
                 * @desc    TC_IH_API_BV_01: Verify the communications interface initialization
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_01() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Front End Communications API must handle at least one underlying communications stack which StackID equals to stack1.
                    // Set of Callback instances is instantiated - See in messages
                    // Preamble done

                    // Test body start
                    // Step1: Call InitialiseInstance with stack identifier PX_STACK_ID_1
                    t_ac.start;
                    pco.send(m_initialiseInstance(PX_STACK_ID_1));
                    alt {
                        [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_1)) { // Step3: Verify whether Instance is valid
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_01

                /**
                 * @desc    TC_IH_API_BV_02: Verify the multiple instance communications interface initialization based on the same communications stack
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_02() runs on EutComp system TestAdapter 
                {
                    var InitialiseInstance v_instance1 := null;
                    var InitialiseInstance v_instance2 := null;
                    var InitialiseInstance v_instance3 := null;

                    // Preamble
                    f_Communication_Preambule();
                    // Front End Communications API must handle at least one underlying communications stack which StackID equals to stack1.
                    // Set of Callback instances is instantiated - See in messages
                    // Preamble done

                    // Test body start
                    // Step1: Call InitialiseInstance with stack identifier PX_STACK_ID_1
                    t_ac.start;
                    pco.send(m_initialiseInstance(PX_STACK_ID_1));
                    alt {
                        [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_1)) -> value v_instance1 { // Step3: Verify whether Instance is valid
                            t_ac.stop;
                            // Step5: New call to InitialiseInstance with same stack identifier
                            t_ac.start;
                            pco.send(m_initialiseInstance(PX_STACK_ID_1));
                            alt {
                                [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_1)) -> value v_instance2 { // Step7: Verify whether Instance is valid
                                    t_ac.stop;
                                    // Step8: Instances shall be differents
                                    if (v_instance1.instance == v_instance2.instance) {
                                        // Step8: fail
                                        setverdict(fail);
                                    } else {
                                        // Step9: New new call to InitialiseInstance with same stack identifier
                                        t_ac.start;
                                        pco.send(m_initialiseInstance(PX_STACK_ID_1));
                                        alt {
                                            [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_1)) -> value v_instance3 { // Step11: Verify whether Instance is valid
                                                t_ac.stop;
                                                // Step11: Instances shall be differents
                                                if ((v_instance1.instance == v_instance3.instance) or (v_instance2.instance == v_instance3.instance)) {
                                                    // Step11: fail
                                                    setverdict(fail);
                                                } else {
                                                    // Step11: pass
                                                    setverdict(pass);
                                                } // End of 'if' statement
                                            } // otherwise Step11 fails on template pattern mismatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // otherwise Step7 fails on template pattern mismatch
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_02
    
                /**
                 * @desc    TC_IH_API_BV_03: Verify the multiple instance communications interface initialization based on different communications stack
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_03() runs on EutComp system TestAdapter 
                {
                    var InitialiseInstance v_instance1 := null;
                    var InitialiseInstance v_instance2 := null;

                    // Preamble
                    f_Communication_Preambule();
                    // Front End Communications API must handle at least one underlying communications stack which StackID equals to stack1.
                    // Set of Callback instances is instantiated - See in messages
                    // Preamble done

                    // Test body start
                    // Step1: Call InitialiseInstance with stack identifier PX_STACK_ID_1
                    t_ac.start;
                    pco.send(m_initialiseInstance(PX_STACK_ID_1));
                    alt {
                        [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_1)) -> value v_instance1 { // Step3: Verify whether Instance is valid
                            t_ac.stop;
                            // Step5: New call to InitialiseInstance with a different stack identifier
                            t_ac.start;
                            pco.send(m_initialiseInstance(PX_STACK_ID_2));
                            alt {
                                [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_2)) -> value v_instance2 { // Step7: Verify whether Instance is valid
                                    t_ac.stop;
                                    // Step8: Instances shall be differents
                                    if (v_instance1.instance == v_instance2.instance) {
                                        // Step8: fail
                                        setverdict(fail);
                                    } else {
                                        // Step8: pass
                                        setverdict(pass);
                                    } // End of 'if' statement
                                } // otherwise Step7 fails on template pattern mismatch
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_03

                /**
                 * @desc    TC_IH_API_BV_04: Verify that parameter is set by Front End Application (single parameter)
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_04() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Preamble done

                    // Test body start
                    // Step1: Call SetParameter
                    t_ac.start;
                    pco.send(m_setParameter(vc_instance[0], "Parameter1", "Value1"));
                    alt {
                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass

                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value1")) {
                                    t_ac.stop;
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(fail);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_04

                /**
                 * @desc    TC_IH_API_BV_05: Verify that parameter is set by Front End Application for multiple instances (different parameter names)
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_05() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 are created.
                    f_createInstance(2);
                    // Preamble done

                    // Test body start
                    // Step1: Call SetParameter with instance1
                    t_ac.start;
                    pco.send(m_setParameter(vc_instance[0], "Parameter1", "Value1"));
                    alt {
                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            
                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value1")) {
                                    t_ac.stop;
                                    // Step7: pass

                                    // Step8: Call SetParameter with instance2
                                    t_ac.start;
                                    pco.send(m_setParameter(vc_instance[1], "Parameter2", "Value2"));
                                    alt {
                                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[1])) { // Step10: Verify returned code
                                            t_ac.stop;
                                            // Step10: pass
                                            
                                            // Step12: Verifiy value of the set parameter
                                            t_ac.start;
                                            pco.send(m_getParameter(vc_instance[1], "Parameter2"));
                                            alt {
                                                [] pco.receive(mw_getParameter(vc_instance[1], "Parameter2", "Value2")) { // Step11: Verify returned code
                                                    t_ac.stop;
                                                    // Step14: pass
                                                    setverdict(pass);
                                                } // otherwise Step11 fails on template pattern mismatch
                                                [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[1], e_ERNotSet)) { // Step3: Verify returned code
                                                    // Step14: fail
                                                    setverdict(fail);
                                                }
                                            } // End of 'alt' statement
                                        } // otherwise Step10 fails on template pattern mismatch
                                    } // End of 'alt' statement
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(fail);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_05

                /**
                 * @desc    TC_IH_API_BV_06: Verify that parameter is set by Front End Application for multiple instances (the same parameter names)
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_06() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 are created.
                    f_createInstance(2);
                    // Preamble done

                    // Test body start
                    // Step1: Call SetParameter with instance1
                    t_ac.start;
                    pco.send(m_setParameter(vc_instance[0], "Parameter1", "Value1"));
                    alt {
                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            
                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value1")) {
                                    t_ac.stop;
                                    // Step7: pass

                                    // Step8: Call SetParameter with instance2
                                    t_ac.start;
                                    pco.send(m_setParameter(vc_instance[1], "Parameter1", "Value2"));
                                    alt {
                                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[1])) { // Step10: Verify returned code
                                            t_ac.stop;
                                            // Step10: pass

                                            // Step12: Verifiy value of the set parameter
                                            t_ac.start;
                                            pco.send(m_getParameter(vc_instance[1], "Parameter1"));
                                            alt {
                                                [] pco.receive(mw_getParameter(vc_instance[1], "Parameter1", "Value2")) { // Step11: Verify returned code
                                                    t_ac.stop;
                                                    // Step14: pass
                                                    setverdict(pass);
                                                } // otherwise Step11 fails on template pattern mismatch
                                                [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[1], e_ERNotSet)) { // Step3: Verify returned code
                                                    // Step14: fail
                                                    setverdict(fail);
                                                }
                                            } // End of 'alt' statement
                                        } // otherwise Step10 fails on template pattern mismatch
                                    } // End of 'alt' statement
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(fail);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_06

                /**
                 * @desc    TC_IH_API_BV_07: Verify that parameter is updated by Front End Application
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_07() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created.
                    f_createInstance(1);
                    // Preamble done

                    // Test body start
                    // Step1: Call SetParameter with instance1
                    t_ac.start;
                    pco.send(m_setParameter(vc_instance[0], "Parameter1", "Value1"));
                    alt {
                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            
                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value1")) {
                                    t_ac.stop;
                                    // Step7: pass

                                    // Step8: Call SetParameter with instance1
                                    t_ac.start;
                                    pco.send(m_setParameter(vc_instance[0], "Parameter1", "Value2"));
                                    alt {
                                        [PIC_ERNoError_on_successful == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step10: Verify returned code
                                            t_ac.stop;
                                            // Step10: pass
                                            
                                            // Step12: Verifiy value of the set parameter
                                            t_ac.start;
                                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                                            alt {
                                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value2")) { // Step11: Verify returned code
                                                    t_ac.stop;
                                                    // Step14: pass
                                                    setverdict(pass);
                                                } // otherwise Step11 fails on template pattern mismatch
                                                [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                                                    // Step14: fail
                                                    setverdict(fail);
                                                }
                                            } // End of 'alt' statement
                                        } // otherwise Step10 fails on template pattern mismatch
                                    } // End of 'alt' statement
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(fail);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_07

                /**
                 * @desc    TC_IH_API_BV_08: Verify that parameter's value is fetched by the Front End Application
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_08() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Parameter1 has already been set with value1
                    f_userActions(cmdSet, setParameter1);
                    // Preamble done

                    // Test body start
                    // Step1: Call GetParameter with instance1
                    t_ac.start;
                    pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                    alt {
                        [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value1")) {
                            t_ac.stop;
                            // Step3: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_08
    
                /**
                 * @desc    TC_IH_API_BV_09: Verify that parameter's value is fetched by the Front End Application (multiple instances)
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_09() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1, instance2 and instance3 are created.
                    f_createInstance(3);
                    // Parameter1 in instance1 has already been set with value1.
                    f_userActions(cmdSet, setParameter1);
                    // Parameter2 in instance1 has already been set with value2.
                    f_userActions(cmdSet, setParameter2);
                    //Parameter1 in instance3 has already been set with value3.
                    f_userActions(cmdSet, setParameter3);
                    // Preamble done

                    // Test body start
                    // Step1: Call GetParameter with instance1
                    t_ac.start;
                    pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                    alt {
                        [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", "Value1")) {
                            t_ac.stop;
                            // Step3: pass

                            // Step4: Call GetParameter with instance2
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[1], "Parameter2"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[1], "Parameter2", "Value2")) {
                                    t_ac.stop;
                                    // Step6: pass

                                    // Step7: Call GetParameter with instance3
                                    t_ac.start;
                                    pco.send(m_getParameter(vc_instance[2], "Parameter3"));
                                    alt {
                                        [] pco.receive(mw_getParameter(vc_instance[2], "Parameter3", "Value3")) {
                                            t_ac.stop;
                                            // Step9: pass
                                            setverdict(pass);
                                        }
                                    } // End of 'alt' statement
                                }
                            } // End of 'alt' statement
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_09
    
                /**
                 * @desc    TC_IH_API_BV_10: Verify that parameter is deleted by Front End Application (single parameter)
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_10() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Parameter1 has already been set with value1
                    f_userActions(cmdSet, setParameter1);
                    // Preamble done

                    // Test body start
                    // Step1: Call DeleteParameter with instance1
                    t_ac.start;
                    pco.send(m_deleteParameter(vc_instance[0], "Parameter1"));
                    alt {
                        [PIC_ERNoError_on_successfully_deleted == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass

                            // Step5: Call GetParameter with instance1
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", complement("Value1"))) { // Step7: String shall have an invalid value
                                    t_ac.stop;
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_10

                /**
                 * @desc    TC_IH_API_BV_11: Verify that parameter is deleted by Front End Application (multiple parameters)
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BV_11() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1, instance2 and instance3 are created.
                    f_createInstance(3);
                    // Parameter1 in instance1 has already been set with value1.
                    f_userActions(cmdSet, setParameter1);
                    // Parameter2 in instance2 has already been set with value2.
                    f_userActions(cmdSet, setParameter2);
                    //Parameter1 in instance3 has already been set with value3.
                    f_userActions(cmdSet, setParameter3);
                    // Preamble done

                    // Test body start
                    // Step1: Call DeleteParameter with instance1
                    t_ac.start;
                    pco.send(m_deleteParameter(vc_instance[0], "Parameter1"));
                    alt {
                        [PIC_ERNoError_on_successfully_deleted == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass

                            // Step5: Call GetParameter with instance1
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], "Parameter1"));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], "Parameter1", complement("Value1"))) { // Step7: String shall have an invalid value
                                    t_ac.stop;
                                    // Step7: pass

                                    // Step8: Call DeleteParameter with instance2
                                    t_ac.start;
                                    pco.send(m_deleteParameter(vc_instance[1], "Parameter2"));
                                    alt {
                                        [PIC_ERNoError_on_successfully_deleted == true] pco.receive(mw_getLastError_ERNoError(vc_instance[1])) { // Step10: Verify returned code
                                            t_ac.stop;
                                            // Step11: pass

                                            // Step12: Call GetParameter with instance2
                                            t_ac.start;
                                            pco.send(m_getParameter(vc_instance[1], "Parameter2"));
                                            alt {
                                                [] pco.receive(mw_getParameter(vc_instance[1], "Parameter2", complement("Value2"))) { // Step14: String shall have an invalid value
                                                    t_ac.stop;
                                                    // Step14: pass

                                                    // Step15: Call DeleteParameter with instance3
                                                    t_ac.start;
                                                    pco.send(m_deleteParameter(vc_instance[2], "Parameter3"));
                                                    alt {
                                                        [PIC_ERNoError_on_successfully_deleted == true] pco.receive(mw_getLastError_ERNoError(vc_instance[2])) { // Step17: Verify returned code
                                                            t_ac.stop;
                                                            // Step18: pass

                                                            // Step19: Call GetParameter with instance3
                                                            t_ac.start;
                                                            pco.send(m_getParameter(vc_instance[2], "Parameter3"));
                                                            alt {
                                                                [] pco.receive(mw_getParameter(vc_instance[2], "Parameter3", complement("Value3"))) { // Step21: String shall have an invalid value
                                                                    t_ac.stop;
                                                                    // Step21: pass
                                                                    setverdict(pass);
                                                                }
                                                            } // End of 'alt' statement
                                                        } // Otherwise Step17 fails on template mismatch
                                                    } // End of 'alt' statement
                                                } // Otherwise Step14 fails on template mismatch
                                            } // End of 'alt' statement
                                        } // Otherwise Step10 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step7 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_11

                /**
                 * @desc    TC_IH_API_BV_12: Verify whether StackAvail returns that communication stack is available
                 * @remark  [TS 17575-2], Clause 7.5. Session Failure
                 */
                testcase TC_IH_API_BV_12() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Communication stack for instance1 is available
                    // Assume it is OK
                    // Preamble done
    
                    // Test body start
                    // Step1: Call StackAvail with instance1
                    t_ac.start;
                    pco.send(m_stackAvail(vc_instance[0]));
                    alt {
                        [PIC_TRUE_if_stack_available == true] pco.receive(mw_stackAvail_true(vc_instance[0])) { // Step3: Check returned code
                            t_ac.stop;
                            // Step3: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_12

                /**
                 * @desc    TC_IH_API_BV_13: Verify whether StackAvail returns that communication stack is available (multiple instances)
                 * @remark  [TS 17575-2], Clause 7.5. Session Failure
                 */
                testcase TC_IH_API_BV_13() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 have already been created.
                    f_createInstance(2);
                    // Communication stack for instance1 and instance2 are available
                    f_userActions(cmdSet, setStackAvailable);
                    // Preamble done

                    // Test body start
                    // Step1: Call StackAvail with instance1
                    t_ac.start;
                    pco.send(m_stackAvail(vc_instance[0]));
                    alt {
                        [PIC_TRUE_if_stack_available == true] pco.receive(mw_stackAvail_true(vc_instance[0])) { // Step3: Check returned code
                            t_ac.stop;
                            // Step3: pass

                            // Step4: Call StackAvail with instance2
                            t_ac.start;
                            pco.send(m_stackAvail(vc_instance[1]));
                            alt {
                                [] pco.receive(mw_stackAvail_true(vc_instance[1])) { // Step5: Check returned code
                                    t_ac.stop;
                                    // Step6: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_13

               /**
                 * @desc    TC_IH_API_BV_14: Verify whether StackAvail returns that communication stack is unavailable
                 * @remark  [TS 17575-2], Clause 7.5. Session Failure
                 */
                testcase TC_IH_API_BV_14() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Communication stack for instance1 is not available
                    f_userActions(cmdSet, setStackNotAvailable);
                    // Preamble done

                    // Test body start
                    // Step1: Call StackAvail with instance1
                    t_ac.start;
                    pco.send(m_stackAvail(vc_instance[0]));
                    alt {
                        [PIC_FALSE_if_not_available == true] pco.receive(mw_stackAvail_false(vc_instance[0])) { // Step3: Check returned code
                            t_ac.stop;
                            // Step3: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_14

               /**
                 * @desc    TC_IH_API_BV_15: Verify whether StackAvail returns that communication stack is unavailable (multiple instances)
                 * @remark  [TS 17575-2], Clause 7.5. Session Failure
                 */
                testcase TC_IH_API_BV_15() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 have already been created.
                    f_createInstance(2);
                    // Communication stack for instance1 and instance2 are not available
                    f_userActions(cmdSet, setStackNotAvailable);
                    f_userActions(cmdSet, setStackNotAvailable_1);
                    // Preamble done

                    // Test body start
                    // Step1: Call StackAvail with instance1
                    t_ac.start;
                    pco.send(m_stackAvail(vc_instance[0]));
                    alt {
                        [PIC_FALSE_if_not_available == true] pco.receive(mw_stackAvail_false(vc_instance[0])) { // Step3: Check returned code
                            t_ac.stop;
                            // Step3: pass

                            // Step4: Call StackAvail with instance2
                            t_ac.start;
                            pco.send(m_stackAvail(vc_instance[1]));
                            alt {
                                [PIC_FALSE_if_not_available == true] pco.receive(mw_stackAvail_false(vc_instance[1])) { // Step6: Check returned code
                                    t_ac.stop;
                                    // Step6: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_15

               /**
                 * @desc    TC_IH_API_BV_16: Verify whether StackAvail returns that communication stack is available (for first instance) and unavailable (for second instance)
                 * @remark  [TS 17575-2], Clause 7.5. Session Failure
                 */
                testcase TC_IH_API_BV_16() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 have already been created.
                    f_createInstance(2);
                    // Communication stack for instance1 is available.
                    f_userActions(cmdSet, setStackAvailable);
                    // Communication stack for instance2 is unavailable
                    f_userActions(cmdSet, setStackNotAvailable_1);
                    // Preamble done

                    // Test body start
                    // Step1: Call StackAvail with instance1
                    t_ac.start;
                    pco.send(m_stackAvail(vc_instance[0]));
                    alt {
                        [PIC_TRUE_if_stack_available == true] pco.receive(mw_stackAvail_true(vc_instance[0])) { // Step3: Check returned code
                            t_ac.stop;
                            // Step3: pass

                            // Step4: Call StackAvail with instance2
                            t_ac.start;
                            pco.send(m_stackAvail(vc_instance[1]));
                            alt {
                                [PIC_FALSE_if_not_available == true] pco.receive(mw_stackAvail_false(vc_instance[1])) { // Step6: Check returned code
                                    t_ac.stop;
                                    // Step6: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_16

                /**
                 * @desc    TC_IH_API_BV_17: Dropping the instance with SENormal severity
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_17() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_17

                /**
                 * @desc    TC_IH_API_BV_18: Dropping the instance with SEUrgent severity
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_18() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_18

                /**
                 * @desc    TC_IH_API_BV_19: Dropping the instance with SEUnconditional severity
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_19() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_19

                /**
                 * @desc    TC_IH_API_BV_20: Dropping the instance with SEUnconditional severity once session is in STStarting state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_20() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STStarting. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_startSession(vc_instance[0]);
                    // Current state is STStarting
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_20

                /**
                 * @desc    TC_IH_API_BV_21: Dropping the instance with SEUnconditional severity once session is in STSessionIdle state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_21() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session is in state Session is in state STSessionIdle. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Current state is STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_21

                /**
                 * @desc    TC_IH_API_BV_22: Dropping the instance with SEUnconditional severity once session is in STSendingADU state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_22() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session is in state Session is in state STSendingADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_establishSending(vc_instance[0]);
                    // Current state is STSendingADU
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_22

                /**
                 * @desc    TC_IH_API_BV_23: Dropping the instance with SEUnconditional severity once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_23() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session is in state Session is in state STSendingADURequest. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSending(vc_instance[0]);
                    // Current state is STSendingADURequest
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_23

                /**
                 * @desc    TC_IH_API_BV_24: Dropping the instance with SEUnconditional severity once session is in STSendingUnformattedADU state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_24() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session is in state Session is in state STSendingUnformattedADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSendingUnformatted(vc_instance[0]);
                    // Current state is STSendingUnformattedADU
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_24

                /**
                 * @desc    TC_IH_API_BV_25: Dropping the instance with SEUnconditional severity once session is in STSessionRxADUs state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_25() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session is in state Session is in state STSessionRxADUs. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startRxADUs(vc_instance[0]);
                    // Current state is STSessionRxADUs
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_25

                /**
                 * @desc    TC_IH_API_BV_26: Dropping the instance with SEUnconditional severity once session is in STErrored state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_26() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_IH_API_BV_26

                /**
                 * @desc    TC_IH_API_BV_27: Dropping the instance with SEUnconditional severity once session is in STEnding state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BV_27() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session is in state Session is in state STEnding. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_startSession(vc_instance[0]);
                    // Current state is STStarting
                    alt { // Wait for e_STSessionIdle state
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STStarting, e_STSessionIdle)) {
                            // Stop session
                            f_endSession(vc_instance[0]);
                        }
                    } // End of 'alt' statement
                    // Current state is STEnding
                    // Preamble done

                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(vc_instance[0]));
                    alt {
                        [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BV_27
    
            } // End of Valid_Behaviour
    
            /**
             * @desc    Test subgroup objective:
             * - to test DUT invalid behaviour with respect to instance initialization;
             * - to test DUT invalid behaviour with respect to parameter setting;
             * - to test DUT invalid behaviour with respect to parameter getting;
             * - to test DUT invalid behaviour with respect to parameter deleting;
             * - to test DUT invalid behaviour with respect to availability of communications stack;
             * - to test DUT invalid behaviour with respect to dropping the session including following severities:
             *      - SENormal;
             *      - SEUrgent;
             * in each state.
             * @remark  29 TCs
             */
            group Invalid_Behaviour {

                /**
                 * @desc    TC_IH_API_BI_01: Verify that FE Communications API returns invalid instance once FE Application selected invalid communication stack
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_01() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Set of Callback instances is instantiated
                    // Preamble done

                    // Test body start
                    // Step1: Call InitialiseInstance with an invalid stack identifier
                    t_ac.start;
                    pco.send(m_initialiseInstance(""));
                    alt {
                        [] pco.receive(mw_initialiseInstance_invalid) { // Step3: Verify whether Instance is invalid
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_IH_API_BI_01
    
                /**
                 * @desc    TC_IH_API_BI_02: Verify that FE Communications API returns invalid instance once FE Application provides invalid Callbacks
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Front End Communications API must handle at least one underlying communications stacks which StackID equals to stack1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call InitialiseInstance with stack identifier PX_STACK_ID_1
                    t_ac.start;
                    pco.send(m_initialiseInstance(PX_STACK_ID_1_WITH_NULL_CALLBACK));
                    alt {
                        [] pco.receive(mw_initialiseInstance_invalid) { // Step3: Verify whether Instance is invalid
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_02
    
                /**
                 * @desc    TC_IH_API_BI_03: Verify parameter setting upon invalid instance
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_03() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SetParameter
                    t_ac.start;
                    pco.send(m_setParameter(PX_INVALID_INSTANCE, "Parameter1", "Value1"));
                    alt {
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNotSet )) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            
                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], PX_INVALID_PARAMETER));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], PX_INVALID_PARAMETER, PX_INVALID_STRING)) {
                                    t_ac.stop;
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_03
    
                /**
                 * @desc    TC_IH_API_BI_04: Verify parameter setting upon invalid parameter
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_04() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SetParameter
                    t_ac.start;
                    pco.send(m_setParameter(vc_instance[0], PX_INVALID_PARAMETER, "value1"));
                    alt {
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet )) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            
                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], PX_INVALID_PARAMETER));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], PX_INVALID_PARAMETER, PX_INVALID_STRING)) {
                                    t_ac.stop;
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_04
    
                /**
                 * @desc    TC_IH_API_BI_05: Verify parameter setting upon invalid value
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_05() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SetParameter
                    t_ac.start;
                    pco.send(m_setParameter(vc_instance[0], "Parameter1", PX_INVALID_VALUE));
                    alt {
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet )) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            
                            // Step5: Verifiy value of the set parameter
                            t_ac.start;
                            pco.send(m_getParameter(vc_instance[0], PX_INVALID_PARAMETER));
                            alt {
                                [] pco.receive(mw_getParameter(vc_instance[0], PX_INVALID_PARAMETER, PX_INVALID_STRING)) {
                                    t_ac.stop;
                                    // Step7: pass
                                    setverdict(pass);
                                }
                            } // End of 'alt' statement
                        } // otherwise Step3 fails on template pattern mismatch
                        [PIC_ERNotSet_returned_on_failure == true] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            // Step4: fail
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_05
    
                /**
                 * @desc    TC_IH_API_BI_06: Verify getting the parameter's value upon invalid instance
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_06() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Preamble done
    
                    // Test body start
                    // Step1: Call GetParameter
                    t_ac.start;
                    pco.send(m_getParameter(PX_INVALID_INSTANCE, "parameter1"));
                    alt {
                        [] pco.receive(mw_getParameter(PX_INVALID_INSTANCE, "parameter1", PX_INVALID_STRING)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step3: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_06
    
                /**
                 * @desc    TC_IH_API_BI_07: Verify getting the parameter's value once parameter does not exist
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_07() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // InvalidParameter has not been set by Front End application
                    // Preamble done
    
                    // Test body start
                    // Step1: Call GetParameter
                    t_ac.start;
                    pco.send(m_getParameter(vc_instance[0], PX_INVALID_PARAMETER));
                    alt {
                        [] pco.receive(mw_getParameter(vc_instance[0], PX_INVALID_PARAMETER, PX_INVALID_STRING)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step3: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_07
    
                /**
                 * @desc    TC_IH_API_BI_08: Verify deletion upon invalid instance
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_08() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Preamble done
    
                    // Test body start
                    // Step1: Call GetParameter
                    t_ac.start;
                    pco.send(m_deleteParameter(PX_INVALID_INSTANCE, "parameter1"));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNotSet)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_08
    
                /**
                 * @desc    TC_IH_API_BI_09: Verify deletion once parameter does not exist
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE to FE Application) Session Request
                 */
                testcase TC_IH_API_BI_09() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 is created
                    f_createInstance(1);
                    // Preamble done
    
                    // Test body start
                    // Step1: Call GetParameter
                    t_ac.start;
                    pco.send(m_deleteParameter(vc_instance[0], "parameter1"));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNotSet)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_09
    
                /**
                 * @desc    TC_IH_API_BI_10: Verify whether StackAvail returns false not having instance initialized
                 * @remark  [TS 17575-2], Clause 7.5. Session Failure
                 */
                testcase TC_IH_API_BI_10() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Preamble done
    
                    // Test body start
                    // Step1: Call GetParameter
                    t_ac.start;
                    pco.send(m_stackAvail(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_stackAvail_false(PX_INVALID_INSTANCE)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        } // otherwise Step3 fails on template pattern mismatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_10
    
                /**
                 * @desc    TC_IH_API_BI_11: Dropping the instance with SENormal severity once no instance is initialized
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_11() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERUnknownInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_11
    
                /**
                 * @desc    TC_IH_API_BI_12: Dropping the instance with SEUrgent severity once no instance is initialized
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_12() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERUnknownInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_12
    
                /**
                 * @desc    TC_IH_API_BI_13: Dropping the instance with SEUnconditional severity once no instance is initialized
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_13() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUnconditional(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERUnknownInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_13
    
                /**
                 * @desc    TC_IH_API_BI_14: Dropping the instance with SENormal severity once session is in STStarting state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_14() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STStarting. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_startSession(vc_instance[0]);
                    // Current state is STStarting
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_14
    
                /**
                 * @desc    TC_IH_API_BI_15: Dropping the instance with SENormal severity once session is in STSessionIdle state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_15() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSessionIdle. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Current state is STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_15
    
                /**
                 * @desc    TC_IH_API_BI_16: Dropping the instance with SENormal severity once session is in STSendingADU state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_16() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSendingADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_establishSending(vc_instance[0]);
                    // Current state is STSendingADU
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_16
    
                /**
                 * @desc    TC_IH_API_BI_17: Dropping the instance with SENormal severity once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_17() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSendingADURequest. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSending(vc_instance[0]);
                    // Current state is STSendingADURequest
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_17
    
                /**
                 * @desc    TC_IH_API_BI_18: Dropping the instance with SENormal severity once session is in STSendingUnformattedADU state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_18() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSendingUnformattedADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSendingUnformatted(vc_instance[0]);
                    // Current state is STSendingUnformattedADU
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_18
    
                /**
                 * @desc    TC_IH_API_BI_19: Dropping the instance with SENormal severity once session is in STSessionRxADUs state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_19() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSessionRxADUs. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startRxADUs(vc_instance[0]);
                    // Current state is STSessionRxADUs
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_19
    
                /**
                 * @desc    TC_IH_API_BI_20: Dropping the instance with SENormal severity once session is in STErrored state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_20() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_20
    
                /**
                 * @desc    TC_IH_API_BI_21: Dropping the instance with SENormal severity once session is in STEnding state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_21() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STEnding. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_startSession(vc_instance[0]);
                    // Current state is STStarting
                    alt { // Wait for e_STSessionIdle state
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STStarting, e_STSessionIdle)) {
                            // Stop session
                            f_endSession(vc_instance[0]);
                        }
                    } // End of 'alt' statement
                    // Current state is STEnding
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SENormal(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_21
    
                /**
                 * @desc    TC_IH_API_BI_22: Dropping the instance with SEUrgent severity once session is in STStarting state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_22() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STStarting. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_startSession(vc_instance[0]);
                    // Current state is STStarting
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_22
    
                /**
                 * @desc    TC_IH_API_BI_23: Dropping the instance with SEUrgent severity once session is in STSessionIdle state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_23() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSessionIdle. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Current state is STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_23
    
                /**
                 * @desc    TC_IH_API_BI_24: Dropping the instance with SEUrgent severity once session is in STSendingADU state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_24() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSendingADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_establishSending(vc_instance[0]);
                    // Current state is STSendingADU
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_24
    
                /**
                 * @desc    TC_IH_API_BI_25: Dropping the instance with SEUrgent severity once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_25() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSendingADURequest. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSending(vc_instance[0]);
                    // Current state is STSendingADURequest
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_25
    
                /**
                 * @desc    TC_IH_API_BI_26: Dropping the instance with SEUrgent severity once session is in STSendingUnformattedADU state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_26() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSendingUnformattedADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSendingUnformatted(vc_instance[0]);
                    // Current state is STSendingUnformattedADU
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_26
    
                /**
                 * @desc    TC_IH_API_BI_27: Dropping the instance with SEUrgent severity once session is in STSessionRxADUs state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_27() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STSessionRxADUs. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startRxADUs(vc_instance[0]);
                    // Current state is STSessionRxADUs
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_27
    
                /**
                 * @desc    TC_IH_API_BI_28: Dropping the instance with SEUrgent severity once session is in STErrored state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_28() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_28
    
                /**
                 * @desc    TC_IH_API_BI_29: Dropping the instance with SEUrgent severity once session is in STEnding state
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_IH_API_BI_29() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established. Session is in state Session is in state STEnding. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_startSession(vc_instance[0]);
                    // Current state is STStarting
                    alt { // Wait for e_STSessionIdle state
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STStarting, e_STSessionIdle)) {
                            // Stop session
                            f_endSession(vc_instance[0]);
                        }
                    } // End of 'alt' statement
                    // Current state is STEnding
                    // Preamble done
    
                    // Test body start
                    // Step1: Call DropInstance with instance1
                    t_ac.start;
                    pco.send(m_dropInstance_SEUrgent(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: pass
                            setverdict(pass);
                        }
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_IH_API_BI_29
    
            } // End of group Invalid_Behaviour
        } // End of Instance_Handling
    
        /**
         * @desc    These Test Purposes apply to  session handling as claimed in [TS 17575-2] clause B.2 with respect to following PICS proforma entries:
         * - API supports StartSession;
         * - API supports EndSession
         * @remark  13 TCs
         */
        group Session_Handling {
            /**
             * @desc    Test subgroup objective:
             * - to test DUT behaviour with respect to session establishment including multiple session establishment in parallel;
             * - to test DUT behaviour with respect to session ending;
             * - to test DUT behaviour with respect to session failure
             * @remark  4 TCs
             */
            group Valid_Behaviour {

                /**
                 * @desc    TC_SH_API_BV_01: Session establishment
                 * @remark  [TS 17575-2], Clause 7.2.3. Outgoing (FE Application to BE) session establishment
                 * @see     TTCN-3 functions f_startSession() and f_terminateSession()
                 */
                testcase TC_SH_API_BV_01() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1 (STNoSession state). Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    // Preamble done

                    // Test body start
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Verify whether session has been established at remote end
                            f_userActions(cmdCheck, verifySessionEstablishedAtRemoteEnd);
                            // Step6: Assume it is OK
                            t_ac.start;
                            repeat; // Wait for event STStarting
                        } // Otherwise Step4 will be failed
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STNoSession, e_STStarting)) { // Step7: Wait for state change message
                            t_ac.stop;
                            
                            t_ac.start;
                            repeat;
                        } // Otherwise Step8 will be failed on t_ac timer expiry
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STStarting, e_STSessionIdle)) { // Step7: Wait for state change message
                            t_ac.stop;
                            // Step8: pass
                            setverdict(pass);
                        } // Otherwise Step8 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_SH_API_BV_01

                /**
                 * @desc    TC_SH_API_BV_02: Multiple session establishment
                 * @remark  [TS 17575-2], Clause 7.2.3. Outgoing (FE Application to BE) session establishment
                 * @see     TTCN-3 functions f_startSession() and f_terminateSession()
                 */
                testcase TC_SH_API_BV_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 have already been created
                    f_createInstance(2);
                    // No session exists for instance1 and instance2 (STNoSession state). Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set) using instance1 and instance2
                    // Preamble done

                    // Test body start
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Verify whether session has been established at remote end
                            f_userActions(cmdCheck, verifySessionEstablishedAtRemoteEnd);
                            // Step6: Assume it is OK
                            t_ac.start;
                            repeat; // Wait for event STStarting
                        } // Otherwise Step4 will be failed
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STNoSession, e_STStarting)) {
                            t_ac.stop;

                            t_ac.start;
                            repeat;
                        }
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STStarting, e_STSessionIdle)) {
                            t_ac.stop;
                            // Step8: pass

                            // Step9: Call StartSession with instance2
                            t_ac.start;
                            pco.send(m_startSession_default(vc_instance[1]));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[1])) { // Step11: Verify returned code
                                    t_ac.stop;
                                    // Step12: Pass

                                    // Step13: Verify whether session has been established at remote end
                                    f_userActions(cmdCheck, verifySessionEstablishedAtRemoteEnd_1);
                                    // Step14: Assume it is OK
                                    t_ac.start;
                                    repeat; // Wait for event STStarting
                                } // Otherwise Step12 will be failed
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[1], e_STNoSession, e_STStarting)) { // Step15: Wait for state change message
                                    t_ac.stop;

                                    t_ac.start;
                                    repeat;
                                }
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[1], e_STStarting, e_STSessionIdle)) { // Step15: Wait for state change message
                                    t_ac.stop;
                                    // Step16: pass
                                    setverdict(pass);
                                }
                                // Otherwise Step16 will be failed on t_ac timer expiry
                            } // End of 'alt' statement
                        }
                        // Otherwise Step8 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[1]); // Back to STUnknownInstance
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_SH_API_BV_02

                /**
                 * @desc    TC_SH_API_BV_03: Session establishment
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 * @see     TTCN-3 functions f_terminateSession()
                 */
                testcase TC_SH_API_BV_03() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established (STSessionIdle state). Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Current state is STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: verify returned code
                            t_ac.stop;
                            // Step4 : Pass
                            
                            // Step5: Verify whether session has been closed
                            f_userActions(cmdCheck, verifySessionClosedAtRemoteEnd);
                            // Step6: Assume it is OK
                            t_ac.start;
                            repeat; // Wait for event STEnding
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSessionIdle, e_STNoSession)) { // Step8: Wait for state change message
                            t_ac.stop;
                            // Step9 : Pass
                            setverdict(pass);
                        }
                        // Otherwise Step9 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BV_03

                /**
                 * @desc    TC_SH_API_BV_04: Session failure handling
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BV_04() runs on EutComp system TestAdapter 
                {
                    var CommsQuery v_oldSate1 := null; // Use to retrieve oldSate1

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established (STSessionIdle state). Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Current state is STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery_any(vc_instance[0])) -> value v_oldSate1 { // Step3: Assign a received state to oldState1
                            t_ac.stop;
                            // Step4 : Session failed due to example communication infrastructure failure
                            f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                            // Current state is STErrored
                            
                            // Step5: Wait for state change message
                            t_ac.start;
                            repeat; // Wait for event STErrored
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], v_oldSate1.state, e_STErrored)) { // Step5: Wait for state change message
                            t_ac.stop;
                            // Step9 : Pass
                            setverdict(pass);
                        } // Otherwise Step9 failed
                        // Otherwise Step9 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BV_04

            } // End of Valid_Behaviour

            /**
             * @desc    Test subgroup objective:
             * - to test DUT invalid behaviour with respect to session establishment including multiple session establishment in parallel;
             * - to test DUT invalid behaviour with respect to session ending in each visible state
             * @remark  9 TCs
             */
            group Invalid_Behaviour {

                /**
                 * @desc    TC_SH_API_BI_01: Session establishment once session is already established
                 * @remark  [TS 17575-2], Clause 7.2.3. Outgoing (FE Application to BE) session establishment
                 */
                testcase TC_SH_API_BI_01() runs on EutComp system TestAdapter 
                {
                    var CommsQuery v_oldSate1 := null; // Use to retrieve oldSate1

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established (STSessionIdle state). Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Current state is STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call again StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERInSession)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Verify whether session has been established at remote end
                            f_userActions(cmdCheck, verifySessionEstablishedAtRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step4 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_01

                /**
                 * @desc    TC_SH_API_BI_02: Session establishment once no instance initialized
                 * @remark  [TS 17575-2], Clause 7.2.3. Outgoing (FE Application to BE) session establishment
                 * @see     TTCN-3 functions f_startSession() and f_terminateSession()
                 */
                testcase TC_SH_API_BI_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Communications API is initialized
                    // Preamble done

                    // Test body start
                    // Step1: Call StartSession with invalid instance
                    t_ac.start;
                    pco.send(m_startSession_default(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_02

                /**
                 * @desc    TC_SH_API_BI_03: Session establishment once end point unknown
                 * @remark  [TS 17575-2], Clause 7.2.3. Outgoing (FE Application to BE) session establishment
                 */
                testcase TC_SH_API_BI_03() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    // No parameterization has been done to establish session 
                    f_createInstance(1);
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with invalid instance
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERUnknownEndpoint)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_03

                /**
                 * @desc    TC_SH_API_BI_04: Ending the session once no instance initialized
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BI_04() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Communications API is initialized
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with invalid instance
                    t_ac.start;
                    pco.send(m_endSession_default(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_04

                /**
                 * @desc    TC_SH_API_BI_05: Ending the session once no session is established
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BI_05() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERInSession)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_05

                /**
                 * @desc    TC_SH_API_BI_06: Ending the session once session is in STSendingUnformattedADU
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BI_06() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session is in state Session is in state STSendingUnformattedADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSendingUnformatted(vc_instance[0]);
                    // Current state is STSendingUnformattedADU
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_remoteDrop(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERInSession)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_06

                /**
                 * @desc    TC_SH_API_BI_07: Ending the session once session is in STSendingADU
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BI_07() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session is in state Session is in state STSendingADU. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_establishSending(vc_instance[0]);
                    // Current state is STSendingADU
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_remoteDrop(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERInSession)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_07

                /**
                 * @desc    TC_SH_API_BI_08: Ending the session once session is in STSendingADURequest
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BI_08() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session is in state Session is in state STSendingADURequest. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_startSending(vc_instance[0]);
                    // Current state is STSendingADURequest
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_remoteDrop(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERInSession)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_08

                /**
                 * @desc    TC_SH_API_BI_09: Ending the session once session is in Ending the session once session is in STAwaitingADUConfirm
                 * @remark  [TS 17575-2], Clause 7.4. Session Ending
                 */
                testcase TC_SH_API_BI_09() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session is in state Session is in state STAwaitingADUConfirm. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession_establishSending(vc_instance[0]);
                    f_endSending(vc_instance[0]);
                    // Current state is STAwaitingADUConfirm
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_remoteDrop(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERInSession)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed on t_ac timer expiry
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_API_BI_09

            } // End of group Invalid_Behaviour
        } // End of Session_Handling

        /**
         * @desc    These Test Purposes apply to  communication service primitives as claimed in [TS 17575-2] clause B.2 with respect to following PICS proforma entries:
         * - API supports SendUnformattedADU;
         * - API supports SendADUSetStart;
         * - API supports SendADU;
         * - API supports SendADUSetEnd;
         * - API supports UnformattedADUReceived Event;
         * - API supports ADUReceived Event;
         * - API supports ADUSent Event;
         * - API supports ADUSendOK Event
         * @remark  47 TCs
         */
        group Communication_Service_Primitives {

            /**
             * @desc    Test subgroup objective:
             * - to test DUT behaviour with respect to sending unformatted ADU while one and multiple sessions are established;
             * - to test DUT behaviour with respect to sending set of structured ADU while one and multiple sessions are established:
             * -        having one ADU in a set;
             * -        having multiple ADUs in a set;
             * - to test DUT behaviour with respect to receiving unformatted ADU while one and multiple sessions are established;
             * - to test DUT behaviour with respect to receiving structured ADU while one and multiple sessions are established;
             * - to test DUT behaviour with respect to ADU request from remote end. 
             * @remark  10 TCs
             */
            group Valid_Behaviour {

                /**
                 * @desc    TC_CSP_API_BV_01: Sending unformatted ADU
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BV_01() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session for instance1 has already been established
                    f_establishSession(vc_instance[0]);
                    // Session related to Instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            t_ac.start;
                            repeat;
                        }
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_specific(vc_instance[0], e_STSendingUnformattedMessage)) {
                            t_ac.stop;
                            // Step5: Remote end acknowledges receipt of ADU
                            f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                            t_ac.start;
                            repeat; // Step6: Wait for event ADUSent
                        }
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_specific(vc_instance[0], e_STSessionIdle)) { // Step6: Wait for event ADUSent
                            t_ac.stop;
                            // Step7: Pass
                            setverdict(pass);
                        } // Otherwise Step 7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_01

                /**
                 * @desc    TC_CSP_API_BV_02: Sending unformatted ADU (multiple sessions)
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BV_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 has already been created.
                    f_createInstance(2);
                    // Session for instance1 and instance2 has already been established
                    f_establishSession(vc_instance[0]); // instance1
                    f_establishSession(vc_instance[1]); // instance2
                    // Instance1 and instance2 are in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            t_ac.start;
                            repeat;
                        }
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_specific(vc_instance[0], e_STSendingUnformattedMessage)) {
                            t_ac.stop;
                            // Step5: Remote end acknowledges receipt of ADU
                            f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                            t_ac.start;
                            repeat; // Step6: Wait for event ADUSent
                        }
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_specific(vc_instance[0], e_STSessionIdle)) { // Step6: Wait for event ADUSent
                            t_ac.stop;
                            // Step7: Pass

                            // Step8: Call SendUnformattedADU with instance1
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[1], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[1])) { // Step10: Verify returned code
                                    t_ac.stop;

                                    // Step11: Pass
                                    t_ac.start;
                                    repeat;
                                }
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_specific(vc_instance[1], e_STSendingUnformattedMessage)) {
                                    t_ac.stop;
                                    // Step12: Remote end acknowledges receipt of ADU
                                    f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                                    t_ac.start;
                                    repeat; // Step13: Wait for event ADUSent
                                }
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_specific(vc_instance[1], e_STSessionIdle)) { // Step13: Wait for event ADUSent
                                    t_ac.stop;
                                    // Step14: Pass
                                    setverdict(pass);
                                } // Otherwise Step 14 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step 7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[1]); // Back to STUnknownInstance
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_02
    
                /**
                 * @desc    TC_CSP_API_BV_03: Sending one structured ADU
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BV_03() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session for instance1 has already been established
                    f_establishSession(vc_instance[0]);
                    // Instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, continue

                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);
                            
                            t_ac.start;
                            repeat; // Step6: Wait for ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step8: Pass, continue

                            // Step9: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step10: R: WORD
                                    t_ac.stop;
                                    // Step11: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step11: Pass, continue

                                        // Step13: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        alt {
                                            [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step15: Verify returned code
                                                t_ac.stop;
                                                // Step17: Remote end acknowledges receipt of ADU
                                                f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                                                t_ac.start;
                                                repeat; // Step18: Wait for ADUSent
                                            } // Otherwise Step16 fails on template mismatch
                                            [PIC_API_supports_ADUSent_Event == true] pco.receive(mw_aduSent(vc_instance[0])) { // Step18: Wait for ADUSent
                                                // Step19: Pass
                                                setverdict(pass);
                                            } // Otherwise Step19 fails on template mismatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step8 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_03

                /**
                 * @desc    TC_CSP_API_BV_04: Sending one ADU set (n messages)
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BV_04() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes
                    var integer v_counter := 0; // Internal counter used by DUT to send n consecutive SendADU messages
                    var integer v_loopNum := sizeof(PX_STRUCTURED_MESSAGES);

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session for instance1 has already been established
                    f_establishSession(vc_instance[0]);
                    // Instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, continue

                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);

                            t_ac.start;
                            repeat; // Step6: Wait for ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step8: Pass, continue

                            // Step9: See variables declaration

                            // Step10: Call SendADU with instance1, v_counter = 0
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGES[v_counter]));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step10: R: WORD
                                    t_ac.stop;
                                    // Step11: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                        stop; // Terminate TC here
                                    } else {
                                        // Step11: Pass, continue

                                        // Step14: i=i+1
                                        v_counter := v_counter + 1;
                                        if (v_counter < v_loopNum) { // Step15
                                            t_ac.start;
                                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGES[v_counter]));
                                            repeat;
                                        }
                                    } // End of 'if' statement
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement

                            // Step16: Call SendADUSetEnd with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetEnd(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step17: Verify returned code
                                    t_ac.stop;
                                    // Step19: Pass

                                    // Step12: Remote end acknowledges receipt of ADU
                                    f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                                    t_ac.start;
                                    repeat; // Step21: Wait for ADUSent
                                } // Otherwise Step18 fails on template mismatch
                                [PIC_API_supports_ADUSent_Event == true] pco.receive(mw_aduSent(vc_instance[0])) { // Step21: Wait for ADUSent
                                    // Step22: Pass
                                    setverdict(pass);
                                } // Otherwise Step22 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_04

                /**
                 * @desc    TC_CSP_API_BV_05: Sending structured ADUs (multiple sessions)
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BV_05() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 has already been created.
                    f_createInstance(2);
                    // Session for instance1 and instance2 has already been established
                    f_establishSession(vc_instance[0]); // instance1
                    f_establishSession(vc_instance[1]); // instance2
                    // Instance1 and instance2 are in STSessionIdle state
                    // Preamble done

                    // Test body start
                    for (var integer idx := 0; idx < 2; idx := idx + 1) {
                        // Step1: Call SendADUSetStart with instance1
                        t_ac.start;
                        pco.send(m_sendADUSetStart(vc_instance[idx]));
                        alt {
                            [] pco.receive(mw_getLastError_ERNoError(vc_instance[idx])) { // Step3: Verify returned code
                                t_ac.stop;
                                // Step4: Pass, continue
        
                                // Step5: Remote End indicates its ability to receive elements
                                f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);
                                
                                t_ac.start;
                                repeat; // Step6: Wait for ADUSendOK
                            } // Otherwise Step4 fails on template mismatch
                            [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[idx])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                                t_ac.stop;
                                // Step8: Pass, continue
        
                                // Step9: Call SendADU with instance1
                                t_ac.start;
                                pco.send(m_sendADU(vc_instance[idx], PX_STRUCTURED_MESSAGE));
                                alt {
                                    [] pco.receive(mw_sendADU(vc_instance[idx])) -> value v_sendADU{ // Step10: R: WORD
                                        t_ac.stop;
                                        // Step11: Verify whether returned value is greater than 0
                                        if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                            // Step11: Fail
                                            setverdict(fail);
                                        } else {
                                            // Step11: Pass, continue
        
                                            // Step13: Call SendADUSetEnd with instance1
                                            t_ac.start;
                                            pco.send(m_sendADUSetEnd(vc_instance[idx]));
                                            alt {
                                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[idx])) { // Step15: Verify returned code
                                                    t_ac.stop;
                                                    // Step17: Remote end acknowledges receipt of ADU
                                                    f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);
        
                                                    t_ac.start;
                                                    repeat; // Step18: Wait for ADUSent
                                                } // Otherwise Step16 fails on template mismatch
                                                [PIC_API_supports_ADUSent_Event == true] pco.receive(mw_aduSent(vc_instance[idx])) { // Step18: Wait for ADUSent
                                                    // Step19: Pass
                                                    setverdict(pass);
                                                } // Otherwise Step19 fails on template mismatch
                                            } // End of 'alt' statement
                                        } // End of 'if' statement
                                    } // Otherwise Step11 fails on template mismatch
                                } // End of 'alt' statement
                            } // Otherwise Step8 fails on template mismatch
                        } // End of 'alt' statement
                    } // End of 'for' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[1]); // Back to STUnknownInstance
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_05

                /**
                 * @desc    TC_CSP_API_BV_06: Receipt of unformatted ADU
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE or FE Application) Session Request
                 */
                testcase TC_CSP_API_BV_06() runs on EutComp system TestAdapter 
                {
                    var UnformattedADUReceived v_event := null; // Used to retrieve bytes received

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session for instance1 has already been established
                    f_establishSession(vc_instance[0]);
                    // Session related to Instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Unformatted ADU is sent from the remote end, consisting of certain payload P of length L,  using a session related to instance1
                    f_userActions(cmdTrigger, sendUnformattedADU);
                    t_ac.start;
                    alt {
                        [PIC_API_supports_UnformattedADUReceived_Event == true] pco.receive(mw_unformattedADUReceived(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE_ON_RECEIPT), PX_UNFORMATTED_MESSAGE_ON_RECEIPT)) -> value v_event { // Step2: Wait for event UnformattedADUReceived
                            t_ac.stop;
                            // Step3: Verify whether: Instance equals to instance1 AND UnformattedMessageLen equals to L AND UnformattedMessage equals to P
                            // Step4: Pass

                            // Step5: Verify whether the remote end has been informed that ADU was received
                            f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step 3 fails on template mismatch on instance or length
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_06

                /**
                 * @desc    TC_CSP_API_BV_07: Receipt of unformatted ADUs for multiple sessions
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE or FE Application) Session Request
                 */
                testcase TC_CSP_API_BV_07() runs on EutComp system TestAdapter 
                {
                    var UnformattedADUReceived v_event := null; // Used to retrieve bytes received
                    var octetstring messages[2] := { PX_UNFORMATTED_MESSAGE_ON_RECEIPT, PX_UNFORMATTED_MESSAGE_ON_RECEIPT_1 };

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 has already been created.
                    f_createInstance(2);
                    // Session for instance1 and instance2 has already been established
                    f_establishSession(vc_instance[0]); // instance1
                    f_establishSession(vc_instance[1]); // instance2
                    // Instance1 and instance2 are in STSessionIdle state
                    // Preamble done

                    // Test body start
                    for (var integer idx := 0; idx < 2; idx := idx + 1) {
                        // Step1: Unformatted ADU is sent from the remote end, consisting of certain payload P of length L,  using a session related to instance1/instance2
                        f_userActions(cmdTrigger, sendUnformattedADU);
                        t_ac.start;
                        alt {
                            [PIC_API_supports_UnformattedADUReceived_Event == true] pco.receive(mw_unformattedADUReceived(vc_instance[idx], lengthof(messages[idx]), messages[idx])) -> value v_event { // Step2: Wait for event UnformattedADUReceived
                                t_ac.stop;
                                // Step3: Verify whether: Instance equals to instance1 AND UnformattedMessageLen equals to L AND UnformattedMessage equals to P
                                // Step4: Pass

                                // Step5: Remote end acknowledges receipt of ADU
                                f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                                // Step6: Pass
                                setverdict(pass);
                            } // Otherwise Step 3 fails on template mismatch on instance or length
                        } // End of 'alt' statement
                    } // End of 'for' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[1]); // Back to STUnknownInstance
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_07

                /**
                 * @desc    TC_CSP_API_BV_08: Receipt of structured ADU
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE or FE Application) Session Request
                 */
                testcase TC_CSP_API_BV_08() runs on EutComp system TestAdapter 
                {
                    var ADUReceived v_event := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session for instance1 has already been established
                    f_establishSession(vc_instance[0]);
                    // Instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Structured ADU is sent from the remote end using a session related to instance1
                    f_userActions(cmdTrigger, sendStructuredADU);
                    t_ac.start;
                    alt {
                        [PIC_API_supports_ADUReceived_Event == true] pco.receive(mw_aduReceived(vc_instance[0], PX_STRUCTURED_MESSAGE_ON_RECEIPT)) { // Step2: Wait for event ADUReceived
                            t_ac.stop;
                            // Step3/4: Verify whether: Instance equals to instance1 AND Element corresponds to sent ADU is pass

                            // Step5: Verify whether the remote end has been informed that ADU was received
                            f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_08

                /**
                 * @desc    TC_CSP_API_BV_09: Receipt of structured ADU for multiple sessions
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE or FE Application) Session Request
                 */
                testcase TC_CSP_API_BV_09() runs on EutComp system TestAdapter 
                {
                    var ADUReceived v_event := null; // Used to retrieve bytes received
                    var octetstring messages[2] := { PX_STRUCTURED_MESSAGE_ON_RECEIPT, PX_STRUCTURED_MESSAGE_ON_RECEIPT_1 };

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 and instance2 has already been created.
                    f_createInstance(2);
                    // Session for instance1 and instance2 has already been established
                    f_establishSession(vc_instance[0]); // instance1
                    f_establishSession(vc_instance[1]); // instance2
                    // Instance1 and instance2 are in STSessionIdle state
                    // Preamble done

                    // Test body start
                    for (var integer idx := 0; idx < 2; idx := idx + 1) {
                        // Step1: Unformatted ADU is sent from the remote end, consisting of certain payload P of length L,  using a session related to instance1/instance2
                        f_userActions(cmdTrigger, sendStructuredADU);
                        t_ac.start;
                        alt {
                            [PIC_API_supports_ADUReceived_Event == true] pco.receive(mw_aduReceived(vc_instance[idx], messages[idx])) -> value v_event { // Step2: Wait for event UnformattedADUReceived
                                t_ac.stop;
                                // Step3: Step3/4: Verify whether: Instance equals to instance1 AND Element corresponds to sent ADU is pass
                                // Step5: Verify whether the remote end has been informed that ADU was received
                                f_userActions(cmdCheck, verifyRemoteEndAckReceiptADU);

                                // Step6: Pass
                                setverdict(pass);
                            } // Otherwise Step 3 fails on template mismatch
                        } // End of 'alt' statement
                    } // End of 'for' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[1]); // Back to STUnknownInstance
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_09

                /**
                 * @desc    TC_CSP_API_BV_10: Verify whether FE Application receives ADURequest callback
                 * @remark  [TS 17575-2], Clause 7.2.1. Incoming (BE or FE Application) Session Request
                 */
                testcase TC_CSP_API_BV_10() runs on EutComp system TestAdapter 
                {
                    var ADURequest v_event := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created.
                    f_createInstance(1);
                    // Session for instance1 has already been established
                    f_establishSession(vc_instance[0]);
                    // Instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Remote end sends ADU Request for elements E corresponding to instance1 
                    f_userActions(cmdTrigger, sendADURequest);
                    t_ac.start;
                    alt {
                        [] pco.receive(mw_aduRequest(vc_instance[0], PX_STRUCTURED_MESSAGE_ON_RECEIPT)) { // Step2: Wait for event ADURequest
                            t_ac.stop;
                            // Step3: Verify whether Instance equals to instance1 AND Elements corresponds to E is pass
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step2 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BV_10

            } // End of Valid_Behaviour

            /**
             * @desc    Test subgroup objective:
             * - to test DUT invalid behaviour with respect to sending unformatted ADU once:
             * -    no instance exists;
             * -    no session exists;
             * -    DUT is in visible state which does not allow to send unformatted ADU.
             * - to test DUT invalid behaviour with respect to 
             * -    starting ADU set;
             * -    ending ADU set;
             * -    sending ADU;
             * - once:
             * -    no instance exists;
             * -    no session exists;
             * -    DUT is in visible state which does not allow to start and end ADU set and send structured ADU
             * @remark  37 TCs
             */
            group Invalid_Behaviour {

                /**
                 * @desc    TC_CSP_API_BI_01: Sending unformatted ADU once no instance is initialized
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_01() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Communications API is initialized
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(PX_INVALID_INSTANCE, lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Verify whether an ADU payload transmitted to remote end
                            f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_01

                /**
                 * @desc    TC_CSP_API_BI_02: Sending unformatted ADU once no session is established
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(PX_INVALID_INSTANCE, lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
    
                            // Step5: Verify whether an ADU payload transmitted to remote end
                            f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_02
    
                /**
                 * @desc    TC_CSP_API_BI_03: Sending unformatted ADU once session is in STStarting state
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_03() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STStarting
    
                            // Step5: Call SendUnformattedADU
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
            
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step3 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_03
    
                /**
                 * @desc    TC_CSP_API_BI_04: Sending unformatted ADU once session is in STEnding state
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_04() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1
                    f_establishSession(vc_instance[0]);
                    // Session related to instance1 is in STSessionIdle state
                    // Preamble done
    
                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STEnding
    
                            // Step5: Call SendUnformattedADU
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
            
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_04
    
                /**
                 * @desc    TC_CSP_API_BI_05: Sending unformatted ADU once session is in STErrored state
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_05() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
    
                            // Step5: Verify whether an ADU payload transmitted to remote end
                            f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_05
    
                /**
                 * @desc    TC_CSP_API_BI_06: Sending unformatted ADU once another unformatted ADU is being sent
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_06() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
    
                            // Step5: New call SendUnformattedADU with instance1
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
    
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_06
    
                /**
                 * @desc    TC_CSP_API_BI_07: Sending unformatted ADU once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_07() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest
    
                            // Step5: New call SendUnformattedADU with instance1
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
    
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_07
    
                /**
                 * @desc    TC_CSP_API_BI_08: Sending unformatted ADU once session is in STSendingADU state
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_08() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest
    
                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);
    
                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU
    
                            // Step8: Call SendUnformattedADU with instance1
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step9: Verify returned code
                                    t_ac.stop;
                                    // Step11: Pass
    
                                    // Step12: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step13: Pass
                                    setverdict(pass);
                                } // Otherwise Step9 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step7 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_08
    
                /**
                 * @desc    TC_CSP_API_BI_09: Sending unformatted ADU once session is in STAwaitingADUConfirm state
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_09() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes
    
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest
    
                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);
    
                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU
    
                            // Step8: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step9: R: WORD
                                    t_ac.stop;
                                    // Step10: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step11: Pass, continue
    
                                        // Step12: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        alt {
                                            [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step13: Verify returned code
                                                t_ac.stop;
                                                // Step15: Pass, state is STAwaitingADUConfirm 
    
                                                // Step16: Call SendUnformattedADU with instance1
                                                t_ac.start;
                                                pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                                                alt {
                                                    [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step18: Verify returned code
                                                        t_ac.stop;
                                                        // Step19: Pass
    
                                                        // Step20: Verify whether an ADU payload transmitted to remote end
                                                        f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                                        // Step21: Pass
                                                        setverdict(pass);
                                                    } // Otherwise Step19 fails on template misnatch
                                                } // End of 'alt' statement
                                            } // Otherwise Step9 fails on template misnatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step15 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_09
    
                /**
                 * @desc    TC_CSP_API_BI_10: Sending unformatted ADU once session failed
                 * @remark  [TS 17575-2], Clause 7.3.2. Unstructured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_10() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1a: Call SendUnformattedADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    // Step1b: In parallel to STEP1a terminate a session at remote end
                    f_userActions(cmdSet, terminateSessionAtEemoteEnd);
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERSessionFailed)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_10
    
                /**
                 * @desc    TC_CSP_API_BI_11: Starting ADU set once no instance is initialized
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_11() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Communications API is initialized
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendADUSetStart(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_11
    
                /**
                 * @desc    TC_CSP_API_BI_12: Starting ADU set once no session is established
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_12() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No Session exists for instance1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_12
    
                /**
                 * @desc    TC_CSP_API_BI_13: Starting ADU set once session is in STStarting state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_13() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STStarting
    
                            // Step5: Call SendADUSetStart
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
            
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step3 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_13
    
                /**
                 * @desc    TC_CSP_API_BI_14: Starting ADU set once session is in STEnding state\
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_14() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1
                    f_establishSession(vc_instance[0]);
                    // Session related to instance1 is in STSessionIdle state
                    // Preamble done
    
                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STEnding
    
                            // Step5: Call SendADUSetStart
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_14
    
                /**
                 * @desc    TC_CSP_API_BI_15: Starting ADU set once session is in STErrored state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_15() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_15
    
                /**
                 * @desc    TC_CSP_API_BI_16: Starting ADU set once session is in STSendingUnformattedADU  state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_16() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingUnformattedADU 
    
                            // Step5: Call SendADUSetStart with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_16
    
                /**
                 * @desc    TC_CSP_API_BI_17: Starting ADU set once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_17() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest
    
                            // Step5: New call SendADUSetStart with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_17
    
                /**
                 * @desc    TC_CSP_API_BI_18: Starting ADU set once session is in STSendingADU state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_18() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest
    
                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);
    
                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU
    
                            // Step8: Call SendADUSetStart with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step9: Verify returned code
                                    t_ac.stop;
                                    // Step11: Pass
                                    setverdict(pass);
                                } // Otherwise Step9 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step7 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_18
    
                /**
                 * @desc    TC_CSP_API_BI_19: Starting ADU set once session is in STAwaitingADUConfirm state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_19() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes
    
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest
    
                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);
    
                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU
    
                            // Step8: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step9: R: WORD
                                    t_ac.stop;
                                    // Step10: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step11: Pass, continue
    
                                        // Step12: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        alt {
                                            [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step13: Verify returned code
                                                t_ac.stop;
                                                // Step15: Pass, state is STAwaitingADUConfirm 
    
                                                // Step16: Call SendADUSetStart with instance1
                                                t_ac.start;
                                                pco.send(m_sendADUSetStart(vc_instance[0]));
                                                alt {
                                                    [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step18: Verify returned code
                                                        t_ac.stop;
                                                        // Step19: Pass
                                                        setverdict(pass);
                                                    } // Otherwise Step19 fails on template misnatch
                                                } // End of 'alt' statement
                                            } // Otherwise Step9 fails on template misnatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step15 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_19
    
                /**
                 * @desc    TC_CSP_API_BI_20: Starting ADU set once session failed
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_20() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1a: Call SendADUSetStart with invalid instance
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    // Step1b: In parallel to STEP1a terminate a session at remote end
                    f_userActions(cmdSet, terminateSessionAtEemoteEnd);
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERSessionFailed)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_20
    
                /**
                 * @desc    TC_CSP_API_BI_21: Sending structured ADU once no instance is initialized
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_21() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Communications API is initialized
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendADU(PX_INVALID_INSTANCE, PX_STRUCTURED_MESSAGE));
                    alt {
                        [] pco.receive(mw_sendADU_error(PX_INVALID_INSTANCE)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
    
                            // Step5: Verify whether an ADU payload transmitted to remote end
                            f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_21
    
                /**
                 * @desc    TC_CSP_API_BI_22: Sending structured ADU once no session is established
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_22() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADU with invalid instance
                    t_ac.start;
                    pco.send(m_sendADU(PX_INVALID_INSTANCE, PX_STRUCTURED_MESSAGE));
                    alt {
                        [] pco.receive(mw_sendADU_error(PX_INVALID_INSTANCE)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
    
                            // Step5: Verify whether an ADU payload transmitted to remote end
                            f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_22
    
                /**
                 * @desc    TC_CSP_API_BI_23: Sending structured ADU once session is in STStarting state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_23() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done
    
                    // Test body start
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STStarting
    
                            // Step5: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(PX_INVALID_INSTANCE, PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU_error(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
            
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step3 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_23
    
                /**
                 * @desc    TC_CSP_API_BI_24: Sending structured ADU once session is in STEnding state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_24() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1
                    f_establishSession(vc_instance[0]);
                    // Session related to instance1 is in STSessionIdle state
                    // Preamble done
    
                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STEnding
    
                            // Step5: Call SendADU
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU_error(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
            
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_24
    
                /**
                 * @desc    TC_CSP_API_BI_25: Sending structured ADU once session is in STErrored state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_25() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendADU with instance1
                    t_ac.start;
                    pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                    alt {
                        [] pco.receive(mw_sendADU_error(vc_instance[0])) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
    
                            // Step5: Verify whether an ADU payload transmitted to remote end
                            f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                            // Step6: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done
    
                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();
    
                } // End of TC_CSP_API_BI_25
    
                /**
                 * @desc    TC_CSP_API_BI_26: Sending structured ADU once session is in STSendingUnformattedADU state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_26() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done
    
                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingUnformattedADU 

                            // Step5: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU_error(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    
                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step7 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_26

                /**
                 * @desc    TC_CSP_API_BI_27: Sending structured ADU once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_27() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest

                            // Step5: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU_error(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass

                                    // Step9: Verify whether an ADU payload transmitted to remote end
                                    f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                    // Step10: Pass
                                    setverdict(pass);
                                } // Otherwise Step7 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_27

                /**
                 * @desc    TC_CSP_API_BI_28: Sending structured ADU once session is in STAwaitingADUConfirm state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_28() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest

                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);

                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU

                            // Step8: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step9: R: WORD
                                    t_ac.stop;
                                    // Step10: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step11: Pass, continue

                                        // Step12: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        alt {
                                            [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step13: Verify returned code
                                                t_ac.stop;
                                                // Step15: Pass, state is STAwaitingADUConfirm 

                                                // Step16: Call SendADU with instance1
                                                t_ac.start;
                                                pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                                                alt {
                                                    [] pco.receive(mw_sendADU_error(vc_instance[0])) { // Step18: Verify returned code
                                                        t_ac.stop;
                                                        // Step19: Pass
                                                        
                                                        // Step20: Verify whether an ADU payload transmitted to remote end
                                                        f_userActions(cmdCheck, verifyADYPayloadTransmittedToRemoteEnd);
                                                        // Step21: Pass
                                                        setverdict(pass);
                                                    } // Otherwise Step19 fails on template misnatch
                                                } // End of 'alt' statement
                                            } // Otherwise Step9 fails on template misnatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step15 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_28

                /**
                 * @desc    TC_CSP_API_BI_29: Ending ADU set once no instance is initialized
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_29() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Communications API is initialized
                    // Preamble done

                    // Test body start
                    // Step1: Call SendADUSetEnd with invalid instance
                    t_ac.start;
                    pco.send(m_sendADUSetEnd(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERNoInstance)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_29

                /**
                 * @desc    TC_CSP_API_BI_30: Ending ADU set once no session is established
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_30() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call SendADUSetEnd with invalid instance
                    t_ac.start;
                    pco.send(m_sendADUSetEnd(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_30

                /**
                 * @desc    TC_CSP_API_BI_313: Ending ADU set once session is in STStarting state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_31() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call StartSession with instance1
                    t_ac.start;
                    pco.send(m_startSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STStarting

                            // Step5: Call SendADUSetEnd with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetEnd(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                } // Otherwise Step3 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_31

                /**
                 * @desc    TC_CSP_API_BI_32: Ending ADU set once session is in STEnding state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_32() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1
                    f_establishSession(vc_instance[0]);
                    // Session related to instance1 is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call EndSession with instance1
                    t_ac.start;
                    pco.send(m_endSession_default(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Curent state is now STEnding

                            // Step5: Call SendADUSetEnd
                            t_ac.start;
                            pco.send(m_sendADUSetEnd(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_32

                /**
                 * @desc    TC_CSP_API_BI_33: Ending ADU set once session is in STErrored state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_33() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done

                    // Test body start
                    // Step1: Call SendADUSetEnd with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetEnd(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass
                            setverdict(pass);
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_33

                /**
                 * @desc    TC_CSP_API_BI_34: Ending ADU set once session is in STSendingUnformattedADU state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_34() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERBadState)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: New call SendADUSetEnd with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetEnd(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_34

                /**
                 * @desc    TC_CSP_API_BI_35: Ending ADU set once session is in STSendingADURequest state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_35() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest

                            // Step5: Call SendADUSetEnd with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetEnd(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass
                                    setverdict(pass);
                                } // Otherwise Step6 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_35
    
                /**
                 * @desc    TC_CSP_API_BI_36: Ending ADU set once session is in STAwaitingADUConfirm state
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_36() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest

                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);

                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU

                            // Step8: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step9: R: WORD
                                    t_ac.stop;
                                    // Step10: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step11: Pass, continue

                                        // Step12: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        alt {
                                            [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step13: Verify returned code
                                                t_ac.stop;
                                                // Step15: Pass, state is STAwaitingADUConfirm 

                                                // Step16: New call SendADUSetEnd with instance1
                                                t_ac.start;
                                                pco.send(m_sendADUSetEnd(vc_instance[0]));
                                                alt {
                                                    [] pco.receive(mw_getLastError(PX_INVALID_INSTANCE, e_ERBadState)) { // Step18: Verify returned code
                                                        t_ac.stop;
                                                        // Step19: Pass
                                                        setverdict(pass);
                                                    } // Otherwise Step19 fails on template misnatch
                                                } // End of 'alt' statement
                                            } // Otherwise Step9 fails on template misnatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step15 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_36

                /**
                 * @desc    TC_CSP_API_BI_37: Ending ADU set once session failed
                 * @remark  [TS 17575-2], 7.3.3. Structured messages (ADUs)
                 */
                testcase TC_CSP_API_BI_37() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    // Preamble done

                    // Test body start
                    // Step1: Call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError(vc_instance[0], e_ERNoError)) { // Step3: Verify returned code
                            t_ac.stop;
                            // Step4: Pass, state is STSendingADURequest

                            // Step5: Remote End indicates its ability to receive elements
                            f_userActions(cmdCheck, verifyRemoteEndIndicatesAbilityToReceiveElements);

                            repeat; // Step6: Wait for event ADUSendOK
                        } // Otherwise Step4 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step7: Verify whether Instance equals to instance1 AND CanSend equals to TRUE
                            t_ac.stop;
                            // Step7: Pass, state is STSendingADU

                            // Step8: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ // Step9: R: WORD
                                    t_ac.stop;
                                    // Step10: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step11: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step11: Pass, continue

                                        // Step12a: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        // Step12b: In parallel to STEP12a terminate a session at remote end
                                        f_userActions(cmdSet, terminateSessionAtEemoteEnd);
                                        alt {
                                            [] pco.receive(mw_getLastError(vc_instance[0], e_ERSessionFailed)) { // Step13: Verify returned code
                                                t_ac.stop;
                                                // Step15: Pass
                                                setverdict(pass);
                                            } // Otherwise Step14 fails on template misnatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step11 fails on template misnatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template misnatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_CSP_API_BI_37

            } // End of group Invalid_Behaviour
        } // End of Communication_Service_Primitives
    
        /**
         * @desc    These Test Purposes apply to  state transtions as claimed in [TS 17575-2] clause B.2 with respect to following PICS proforma entries:
         * - API supports InstanceStateChange Event;
         * - API supports CommsQuery;
         * - API supports SessionRequest Event
         * @remark  16 TCs
         */
        group State_Transition {

            /**
             * @desc    Test subgroup objective:
             * - to test DUT behaviour with respect to state transition by
             * - querying DUT about old visible state;
             * - triggering DUT to change its visible state;
             * - checking whether DUT provides InstanceStateChange upon visible state change; 
             * - querying DUT about new visible state
             * @remark  16 TCs
             */
            group Valid_Behaviour {

                /**
                 * @desc    TC_ST_API_BV_01: State transition from STUnknownInstance to STNoSession
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_01() runs on EutComp system TestAdapter 
                {
                    var InitialiseInstance v_instance := null; // Used to retrieve instance handle

                    // Preamble
                    f_Communication_Preambule();
                    // Front End Communications API must handle at least one underlying communications stack which StackID equals to stack1
                    // Set of Callback instances is instantiated
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with invalid instance
                    t_ac.start;
                    pco.send(m_commsQuery(PX_INVALID_INSTANCE));
                    alt {
                        [] pco.receive(mw_commsQuery(PX_INVALID_INSTANCE, e_STUnknownInstance)) { // Step3: Verify whether CEN175752StateE equals to STUnknownInstance
                            t_ac.stop;
                            // Step4: Pass
                            
                            // Step5: Call InitialiseInstance with stack1
                            t_ac.start;
                            pco.send(m_initialiseInstance(PX_STACK_ID_1));
                            alt {
                                [] pco.receive(mw_initialiseInstance_valid(PX_STACK_ID_1)) -> value v_instance { // Step6: R: Instance
                                    t_ac.stop;
                                    // Step8: Pass

                                    // Step9: Assign received Instance as instance1
                                    vc_instance[0] := v_instance.instance;
                                   repeat; // Step10: Wait for instance state change
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STUnknownInstance, e_STNoSession)) { // Step10: Wait for instance state change
                                    t_ac.stop;
                                    // Step12: Pass

                                    // Step13: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STNoSession)) { // Step14: Verify whether CEN175752StateE equals to STNoSession
                                            t_ac.stop;
                                            // Step15: Pass
                                            setverdict(pass);
                                        } // Otherwise Step14 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_01

                /**
                 * @desc    TC_ST_API_BV_02: State transition from STNoSession to STUnknownInstance
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STNoSession)) { // Step3: Verify whether CEN175752StateE equals to STNoSession
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call DropInstance with instance1
                            t_ac.start;
                            pco.send(m_dropInstance_SENormal(vc_instance[0]));
                            alt {
                                [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass

                                    t_ac.start; // Step9: Wait for instance state change
                                    repeat;
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STNoSession, e_STUnknownInstance)) { // Step9: Wait for instance state change
                                    t_ac.stop;
                                    // Step11: Pass

                                    // Step12: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STUnknownInstance)) { // Step13: Verify whether CEN175752StateE equals to STUnknownInstance
                                            t_ac.stop;
                                            // Step15: Pass
                                            setverdict(pass);
                                        } // Otherwise Step14 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step10 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_02

                /**
                 * @desc    TC_ST_API_BV_03: Verify that there is no state change upon receipt of SessionRequest
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_03() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STNoSession)) { // Step3: Verify whether CEN175752StateE equals to STNoSession
                            t_ac.stop;
                            // Step4: Pass
                            
                            // Step5: Session request from remote end corresponding to instance1
                            f_userActions(cmdTrigger, sessionRequestFromRemoteEnd);
                            repeat; // Step6: Wait for SessionRequest
                        } // Otherwise Step3 fails on template mismatch
                        [] pco.receive(mw_sessionRequest(vc_instance[0])) { // Step6: Wait for SessionRequest
                            t_ac.stop;
                            // Step8: Pass

                            // Step9: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STNoSession)) { // Step10: Verify whether CEN175752StateE equals to STNoSession
                                    t_ac.stop;
                                    // Step12: Pass
                                    setverdict(pass);
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_03

                /**
                 * @desc    TC_ST_API_BV_04: State transition from STNoSession to STStarting
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_04() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // No session exists for instance1
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STNoSession)) { // Step3: Verify whether CEN175752StateE equals to STNoSession
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call StartSession  with instance1
                            t_ac.start;
                            pco.send(m_startSession_default(vc_instance[0]));
                            alt {
                                [PIC_ERNoError_on_successfully_dropped == true] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass

                                    t_ac.start; // Step9: Wait for instance state change
                                    repeat;
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STNoSession, e_STStarting)) { // Step9: Wait for instance state change
                                    t_ac.stop;
                                    // Step11: Pass

                                    // Step12: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STStarting)) { // Step13: Verify whether CEN175752StateE equals to STStarting
                                            t_ac.stop;
                                            // Step15: Pass
                                            setverdict(pass);
                                        } // Otherwise Step14 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step10 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_04

                /**
                 * @desc    TC_ST_API_BV_05: State transition from STStarting to STSessionIdle
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_05() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is being established
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STStarting)) { // Step3: Verify whether CEN175752StateE equals to STStarting
                            t_ac.stop;
                            // Step4: Pass

                            t_ac.start; // Step5: Wait for instance state change
                            repeat;
                        } // Otherwise Step3 fails on template mismatch
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STNoSession, e_STSessionIdle)) { // Step5: Wait for instance state change
                            t_ac.stop;
                            // Step7: Pass

                            // Step8: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step10: Verify whether CEN175752StateE equals to STSessionIdle
                                    t_ac.stop;
                                    // Step11: Pass
                                    setverdict(pass);
                                } // Otherwise Step10 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step6 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_05

                /**
                 * @desc    TC_ST_API_BV_06: State transition from STSessionIdle to STSendingUnformattedADU
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_06() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step3: Verify whether CEN175752StateE equals to STSessionIdle
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call SendUnformattedADU with instance1
                            t_ac.start;
                            pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass

                                    t_ac.start; // Step9: Wait for instance state change
                                    repeat;
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSessionIdle, e_STSendingUnformattedMessage)) { // Step9: Wait for instance state change
                                    t_ac.stop;
                                    // Step11: Pass

                                    // Step12: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSendingUnformattedMessage)) { // Step13: Verify whether CEN175752StateE equals to STSendingUnformattedADU
                                            t_ac.stop;
                                            // Step15: Pass
                                            setverdict(pass);
                                        } // Otherwise Step14 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step10 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_06

                /**
                 * @desc    TC_ST_API_BV_07: State transition from STSessionIdle to STSendingUnformattedADU
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_07() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state, call SendUnformattedADU with instance1
                    t_ac.start;
                    pco.send(m_sendUnformattedADU(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE), PX_UNFORMATTED_MESSAGE));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Verify returned code
                            t_ac.stop;

                            t_ac.start; // Wait for instance state change
                            repeat;
                        }
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSessionIdle, e_STSendingUnformattedMessage)) { // Wait for instance state change
                            t_ac.stop;
                            // Step11: Pass
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Session is in STSendingUnformattedADU state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSendingUnformattedMessage)) { // Step3: Verify whether CEN175752StateE equals to STSendingUnformattedADU
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Wait for ADUSent
                            t_ac.start; 
                            repeat;
                        } // Otherwise Step3 fails on template mismatch
                        [] pco.receive(mw_aduSent(vc_instance[0])) { // Step5: Wait for ADUSent
                            t_ac.stop;
                            // Step7: Pass

                            t_ac.start; // Step8: Wait for instance state change
                            repeat;
                        }  // Otherwise Step6 fails on template mismatch
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSendingUnformattedMessage, e_STSessionIdle)) { // Step8: Wait for instance state change
                            t_ac.stop;
                            // Step10: Pass

                            // Step11: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step12: Verify whether CEN175752StateE equals to STSessionIdle
                                    t_ac.stop;
                                    // Step14: Pass
                                    setverdict(pass);
                                } // Otherwise Step13 fails on template mismatch
                            } // End of 'alt' statement
                        }  // Otherwise Step9 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_07

                /**
                 * @desc    TC_ST_API_BV_08: Verify that there is no state change upon receipt of ADURequest
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_08() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step3: Verify whether CEN175752StateE equals to STSessionIdle
                            t_ac.stop;
                            // Step4: Pass
                            
                            // Step5: Remote end sends ADU Request for elements E corresponding to instance1
                            f_userActions(cmdTrigger, aduRequestFromRemoteEnd);
                            repeat; // Step6: Wait for ADURequest
                        } // Otherwise Step3 fails on template mismatch
                        [] pco.receive(mw_aduRequest(vc_instance[0], PX_STRUCTURED_MESSAGE_ON_RECEIPT)) { // Step6: Wait for ADURequest
                            t_ac.stop;
                            // Step8: Pass

                            // Step9: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step10: Verify whether CEN175752StateE equals to STSessionIdle
                                    t_ac.stop;
                                    // Step12: Pass
                                    setverdict(pass);
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement

                        } // Otherwise Step7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_08

                /**
                 * @desc    TC_ST_API_BV_09: Verify that there is no state change upon receipt of ADURequest
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_09() runs on EutComp system TestAdapter 
                {
                    var UnformattedADUReceived v_event := null; // Used to retrieve bytes received

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step3: Verify whether CEN175752StateE equals to STSessionIdle
                            t_ac.stop;
                            // Step4: Pass
                            
                            // Step5: Remote end sends ADU Request for elements E corresponding to instance1
                            f_userActions(cmdTrigger, unformatedADURequestFromRemoteEnd);
                            repeat; // Step6: Wait for UnformattedADUReceived
                        } // Otherwise Step3 fails on template mismatch
                        [] pco.receive(mw_unformattedADUReceived(vc_instance[0], lengthof(PX_UNFORMATTED_MESSAGE_ON_RECEIPT), PX_UNFORMATTED_MESSAGE_ON_RECEIPT)) -> value v_event { // Step6: Wait for UnformattedADUReceived
                            t_ac.stop;
                            // Step7: Verify whether: Instance equals to instance1 AND UnformattedMessageLen equals to L AND UnformattedMessage equals to P
                            // Step8: Pass

                            // Step9: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step10: Verify whether CEN175752StateE equals to STSessionIdle
                                    t_ac.stop;
                                    // Step12: Pass
                                    setverdict(pass);
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_09

                /**
                 * @desc    TC_ST_API_BV_10: Verify that there is no state change upon receipt of ADU Received
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_10() runs on EutComp system TestAdapter 
                {
                    var ADUReceived v_event := null; // Used to retrieve bytes received

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step3: Verify whether CEN175752StateE equals to STSessionIdle
                            t_ac.stop;
                            // Step4: Pass
                            
                            // Step5: Structured ADU is sent from the remote end using a session related to instance1
                            f_userActions(cmdTrigger, structuredADURequestFromRemoteEnd);
                            repeat; // Step6: Wait for ADUReceived
                        } // Otherwise Step3 fails on template mismatch
                        [] pco.receive(mw_aduReceived(vc_instance[0], PX_STRUCTURED_MESSAGE_ON_RECEIPT)) -> value v_event { // Step6: Wait for ADUReceived
                            t_ac.stop;
                            // Step7: Verify whether: Instance equals to instance1 AND Element corresponds to sent ADU
                            // Step8: Pass
    
                            // Step9: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step10: Verify whether CEN175752StateE equals to STSessionIdle
                                    t_ac.stop;
                                    // Step12: Pass
                                    setverdict(pass);
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step7 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_10

                /**
                 * @desc    TC_ST_API_BV_11: Verify that there is no state change upon receipt of ADU Received
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_11() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step3: Verify whether CEN175752StateE equals to STSessionIdle
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call SendADUSetStart with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass

                                    t_ac.start; // Step9: Wait for instance state change
                                    repeat;
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSessionIdle, e_STSendingElementsRequest)) { // Step9: Wait for instance state change
                                    t_ac.stop;
                                    // Step11: Pass

                                    // Step12: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSendingElementsRequest)) { // Step13: Verify whether CEN175752StateE equals to STSendingADURequest
                                            t_ac.stop;
                                            // Step15: Pass
                                            setverdict(pass);
                                        } // Otherwise Step14 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step10 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_11

                /**
                 * @desc    TC_ST_API_BV_12: Verify that there is no state change upon receipt of ADURequest
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_12() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step3: Verify whether CEN175752StateE equals to STSessionIdle
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call SendADUSetStart with instance1
                            t_ac.start;
                            pco.send(m_sendADUSetStart(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Pass

                                    // Step9: Remote End indicates no ability to receive elements
                                    f_userActions(cmdTrigger, verifyRemoteEndIndicatesAbilityToReceiveElements);
                                    t_ac.start; // Step10: Wait for ADUSendOK
                                    repeat;
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_not_canSend(vc_instance[0])) { // Step10: Wait for ADUSendOK
                                    t_ac.stop;
                                    // Step12: Pass
        
                                    // Step13: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step14: Verify whether CEN175752StateE equals to STSessionIdle
                                            t_ac.stop;
                                            // Step16: Pass
                                            setverdict(pass);
                                        } // Otherwise Step15 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step11 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step4 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_12

                /**
                 * @desc    TC_ST_API_BV_13: State transition from STSendingADURequest to STSendingADU
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_13() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state
                    // Call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                            t_ac.stop;
                        }
                    } // End of 'alt' statement
                    // Session is in STSendingADURequest state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSendingElementsRequest)) { // Step3: Verify whether CEN175752StateE equals to STSendingADURequest
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Remote End indicates no ability to receive elements
                            f_userActions(cmdTrigger, verifyRemoteEndIndicatesAbilityToReceiveElements);
                            t_ac.start; // Step6: Wait for ADUSendOK
                            repeat;
                        } // Otherwise Step7 fails on template mismatch
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Step6: Wait for ADUSendOK
                            t_ac.stop;
                            // Step8: Pass

                            t_ac.start; // Step9: Wait for instance state change
                            repeat;
                        } // Otherwise Step7 fails on template mismatch
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSendingElementsRequest, e_STSendingElements)) { // Step9: Wait for instance state change
                            t_ac.stop;
                            // Step11: Pass

                            // Step12: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSendingElements)) { // Step14: Verify whether CEN175752StateE equals to STSendingADU
                                    t_ac.stop;
                                    // Step15: Pass
                                    setverdict(pass);
                                } // Otherwise Step14 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_13

                /**
                 * @desc    TC_ST_API_BV_14: State transition from STSendingADU to STAwaitingADUConfirm
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_14() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state, call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                            t_ac.stop;

                            t_ac.start; // Step6: Wait for ADUSendOK
                            repeat;
                        }
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Wait for ADUSendOK
                            t_ac.stop;
                        }
                    } // End of 'alt' statement
                    // Session is in STSendingADU state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STSendingElements)) { // Step3: Verify whether CEN175752StateE equals to STSendingADU
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU { // Step6: R: WORD
                                    t_ac.stop;
                                    // Step7: Verify whether returned value is greater than 0
                                    if (v_sendADU.remaining <= 0) { // remaining shall be present (? in template)
                                        // Step8: Fail
                                        setverdict(fail);
                                    } else {
                                        // Step8: Pass, continue

                                        // Step9: Call SendADUSetEnd with instance1
                                        t_ac.start;
                                        pco.send(m_sendADUSetEnd(vc_instance[0]));
                                        alt {
                                            [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step10: Verify returned code
                                                t_ac.stop;
                                                // Step12: Pass

                                                t_ac.start; // Step13: Wait for instance state change
                                                repeat;
                                            } // Otherwise Step11 fails on template mismatch
                                            [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STSendingElements, e_STAwaitingElementsConfirm)) { // Step13: Wait for instance state change
                                                t_ac.stop;
                                                // Step15: Pass

                                                // Step16: Call CommsQuery with instance1
                                                t_ac.start;
                                                pco.send(m_commsQuery(vc_instance[0]));
                                                alt {
                                                    [] pco.receive(mw_commsQuery(vc_instance[0], e_STAwaitingElementsConfirm)) { // Step17: Verify whether CEN175752StateE equals to STAwaitingADUConfirm
                                                        t_ac.stop;
                                                        // Step19: Pass
                                                        setverdict(pass);
                                                    } // Otherwise Step18 fails on template mismatch
                                                } // End of 'alt' statement
                                            } // Otherwise Step14 fails on template mismatch
                                        } // End of 'alt' statement
                                    } // End of 'if' statement
                                } // Otherwise Step7 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_14

                /**
                 * @desc    TC_ST_API_BV_15: State transition from STAwaitingADUConfirm to STSessionIdle
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_15() runs on EutComp system TestAdapter 
                {
                    var SendADU v_sendADU := null; // Used to retrieve remaining bytes

                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session exists for instance1. Correct parametrization has already been done to establish session (example: ipAddress, port, url, protocol, PDP context, etc. are set)
                    f_establishSession(vc_instance[0]);
                    // Session is in STSessionIdle state, call SendADUSetStart with instance1
                    t_ac.start;
                    pco.send(m_sendADUSetStart(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                            t_ac.stop;

                            t_ac.start; // Step6: Wait for ADUSendOK
                            repeat;
                        }
                        [PIC_API_supports_ADUSendOK_Event == true] pco.receive(mw_aduSendOK_canSend(vc_instance[0])) { // Wait for ADUSendOK
                            t_ac.stop;

                            // Session is in STSendingADU state, call SendADU with instance1
                            t_ac.start;
                            pco.send(m_sendADU(vc_instance[0], PX_STRUCTURED_MESSAGE));
                            alt {
                                [] pco.receive(mw_sendADU(vc_instance[0])) -> value v_sendADU{ //  R: WORD
                                    t_ac.stop;

                                    t_ac.start;
                                    pco.send(m_sendADUSetEnd(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step10: Verify returned code
                                            t_ac.stop;
                                        }
                                    } // End of 'alt' statement
                                }
                            } // End of 'alt' statement
                        }
                    } // End of 'alt' statement
                    // Session is in STAwaitingADUConfirm state
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STAwaitingElementsConfirm)) { // Step3: Verify whether CEN175752StateE equals to STAwaitingADUConfirm
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Remote end acknowledges receipt of ADU
                            f_userActions(cmdTrigger, verifyRemoteEndAckReceiptADU);
                            t_ac.start; // Step6: Wait for ADUSent
                            repeat;
                        } // Otherwise Step3 fails on template mismatch
                        [] pco.receive(mw_aduSent(vc_instance[0])) { // Step6: Wait for ADUSent
                            t_ac.stop;
                            // Step8: Pass

                            t_ac.start; // Step9: Wait for instance state change
                            repeat;
                        } // Otherwise Step7 fails on template mismatch
                        [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STAwaitingElementsConfirm, e_STSessionIdle)) { // Step9: Wait for instance state change
                            t_ac.stop;
                            // Step11: Pass

                            // Step12: Call CommsQuery with instance1
                            t_ac.start;
                            pco.send(m_commsQuery(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_commsQuery(vc_instance[0], e_STSessionIdle)) { // Step13: Verify whether CEN175752StateE equals to STSessionIdle
                                    t_ac.stop;
                                    // Step15: Pass
                                    setverdict(pass);
                                } // Otherwise Step14 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step10 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_terminateSession(vc_instance[0]); // Back to STUnknownInstance
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_15

                /**
                 * @desc    TC_ST_API_BV_16: State transition from STErrored to STNoSession
                 * @remark  [TS 17575-2], Clause 7.2. Initialisation phase
                 */
                testcase TC_ST_API_BV_16() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // A valid Instance instance1 has already been created
                    f_createInstance(1);
                    // Session for instance1 is established
                    f_establishSession(vc_instance[0]);
                    // Session is in state Session STSessionIdle
                    f_userActions(cmdTrigger, makeCommunicationLinkFailure);
                    // Current state is STErrored
                    // Preamble done

                    // Test body start
                    // Step1: Call CommsQuery with instance1
                    t_ac.start;
                    pco.send(m_commsQuery(vc_instance[0]));
                    alt {
                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STErrored)) { // Step2: Verify whether CEN175752StateE equals to STErrored
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: Call EndSession
                            t_ac.start;
                            pco.send(m_endSession_default(vc_instance[0]));
                            alt {
                                [] pco.receive(mw_getLastError_ERNoError(vc_instance[0])) { // Step6: Verify returned code
                                    t_ac.stop;
                                    // Step8: Padd

                                    t_ac.start;
                                    repeat; // Step9: Wait for instance state change
                                } // Otherwise Step7 fails on template mismatch
                                [PIC_API_supports_InstanceStateChange_Event == true] pco.receive(mw_instanceStateChange_transition(vc_instance[0], e_STErrored, e_STNoSession)) { // Step9: Wait for instance state change
                                    t_ac.stop;
                                    // Step11: Pass

                                    // Step12: Call CommsQuery with instance1
                                    t_ac.start;
                                    pco.send(m_commsQuery(vc_instance[0]));
                                    alt {
                                        [] pco.receive(mw_commsQuery(vc_instance[0], e_STNoSession)) { // Step13: Verify whether CEN175752StateE equals to STNoSession
                                            t_ac.stop;
                                            // Step15: Pass
                                            setverdict(pass);
                                        } // Otherwise Step14 fails on template mismatch
                                    } // End of 'alt' statement
                                } // Otherwise Step10 fails on template mismatch
                            } // End of 'alt' statement
                        } // Otherwise Step3 fails on template mismatch
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_ST_API_BV_16

            } // End of Valid_Behaviour

            /**
             * @desc    No test purposes for invalid behaviour are specified (BI), as [TS 17575-2] does not specify any invalid behaviour
             * @remark  0 TCs
             */
            group Invalid_Behaviour {

            } // End of group Invalid_Behaviour
        } // End of group State_Transition

    } // End of group Front_End_Communications_API

    group Back_End_Communications_API {

        group Session_Handling {

            group Valid_Behaviour {

                /**
                 * @desc    TC_SH_APPL_BV_01: Incoming session request (BE to FE Application)
                 * @remark  [TS 17575-2], Clause 7.2.2. Outgoing (FE application to BE) Session establishment
                 */
                testcase TC_SH_APPL_BV_01() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Application is initialized and can receive Session Request callback
                    // Preamble done

                    // Test body start
                    // Step1: Call Session request specifying the instance and the handle
                    t_ac.start;
                    pco.send(m_sessionRequest_default);
                    alt {
                        [] pco.receive(mw_startSession_default) { // Step3: Verify whether Instance equals to instance1 AND SessionHandle equals to sessionHandle1
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: R: CEN175752Error = ErNoError 
                            pco.send(m_setLastError_default);
                            // Step6: C: InstanceStateChange (Instance = instance1, oldState = STStarting, newState = STSessionIdle)
                            pco.send(m_instanceStateChange_default(e_STStarting, e_STSessionIdle));
                            // Step7: Pass
                            setverdict(pass);
                        } // Otherwise Step4 will be failed
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_APPL_BV_01

                /**
                 * @desc    TC_SH_APPL_BV_02: Session re-establishment by Front End application upon session failure
                 * @remark  [TS 17575-2], Clause 7.5. Session failure
                 */
                testcase TC_SH_APPL_BV_02() runs on EutComp system TestAdapter 
                {
                    // Preamble
                    f_Communication_Preambule();
                    // FE Application is initialized and can receive Session Request callback
                    // Preamble done

                    // Test body start
                    // Step1: Call Session request specifying the instance and the handle
                    t_ac.start;
                    pco.send(m_sessionRequest_default);
                    alt {
                        [] pco.receive(mw_startSession_default) { // Step3: Verify whether Instance equals to instance1 AND SessionHandle equals to sessionHandle1
                            t_ac.stop;
                            // Step4: Pass

                            // Step5: R: CEN175752Error = ErNoError 
                            pco.send(m_setLastError_default);
                            // Step6: C: InstanceStateChange (Instance = instance1, oldState = STStarting, newState = STSessionIdle)
                            pco.send(m_instanceStateChange_default(e_STStarting, e_STSessionIdle));
                            // Step7: C: InstanceStateChange (Instance = instance1, oldState = STSessionIdle, newState = STErrored)
                            t_noac.start;
                            alt {
                                [] t_noac.timeout {
                                    pco.send(m_instanceStateChange_default(e_STSessionIdle, e_STErrored));

                                    t_ac.start;
                                    alt {
                                        [] pco.receive(mw_endSession_default) { // Step9: Verify whether Instance equals to instance1
                                            t_ac.stop;
                                            // Step10: Pass

                                            // Step11: R: CEN175752Error = ErNoError 
                                            pco.send(m_setLastError_default);

                                            t_ac.start; // Step12 Wait for StartSession
                                            repeat;
                                        } // Otherwise Step9 fails on template mismatch
                                        [] pco.receive(mw_startSession_default) { // Step12: Wait for StartSession
                                            t_ac.stop;
                                            // Step14: Pass

                                            // Step15: R: CEN175752Error = ErNoError 
                                            pco.send(m_setLastError_default);

                                            // Step16: C: InstanceStateChange (Instance = instance1, oldState = STStarting, newState = STSessionIdle)
                                            pco.send(m_instanceStateChange_default(e_STStarting, e_STSessionIdle));

                                            // Step17: Pass
                                            setverdict(pass);
                                        } // Otherwise Step13 fails on template mismatch
                                    } // End of 'alt' statement
                                }
                            } // End of 'alt' statement
                        } // Otherwise Step4 will be failed
                    } // End of 'alt' statement
                    // Test body done

                    // Postamble
                    f_Communication_Postambule();

                } // End of TC_SH_APPL_BV_02

            } // End of Valid_Behaviour

            /**
             * @desc    No test purposes for invalid behaviour are specified (BI), as [TS 17575-2] does not specify any invalid behaviour
             * @remark  0 TCs
             */
            group Invalid_Behaviour {

            } // End of group Invalid_Behaviour

        } // End of group Session_Handling {

    } // End of group Back_End_Communications_API

} // End of module Communication_TCs